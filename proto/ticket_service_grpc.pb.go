// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/ticket_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketBookingService_PurchaseTicket_FullMethodName      = "/proto.TicketBookingService/PurchaseTicket"
	TicketBookingService_GetReceipt_FullMethodName          = "/proto.TicketBookingService/GetReceipt"
	TicketBookingService_GetAllocationSeats_FullMethodName  = "/proto.TicketBookingService/GetAllocationSeats"
	TicketBookingService_CancelBookingTicket_FullMethodName = "/proto.TicketBookingService/CancelBookingTicket"
	TicketBookingService_GetAvailableSeats_FullMethodName   = "/proto.TicketBookingService/GetAvailableSeats"
	TicketBookingService_UpdateUserSeat_FullMethodName      = "/proto.TicketBookingService/UpdateUserSeat"
)

// TicketBookingServiceClient is the client API for TicketBookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketBookingServiceClient interface {
	PurchaseTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	GetReceipt(ctx context.Context, in *GetUserTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	GetAllocationSeats(ctx context.Context, in *GetSeatAllocationRequest, opts ...grpc.CallOption) (*GetSeatAllocationResponse, error)
	CancelBookingTicket(ctx context.Context, in *CancelBookingTicketRequest, opts ...grpc.CallOption) (*CancelBookingTicketResponse, error)
	GetAvailableSeats(ctx context.Context, in *GetAvailableSeatsRequest, opts ...grpc.CallOption) (*GetAvailableSeatsResponse, error)
	UpdateUserSeat(ctx context.Context, in *UpdateUserSeatRequest, opts ...grpc.CallOption) (*UpdateUserSeatResponse, error)
}

type ticketBookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketBookingServiceClient(cc grpc.ClientConnInterface) TicketBookingServiceClient {
	return &ticketBookingServiceClient{cc}
}

func (c *ticketBookingServiceClient) PurchaseTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_PurchaseTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) GetReceipt(ctx context.Context, in *GetUserTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_GetReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) GetAllocationSeats(ctx context.Context, in *GetSeatAllocationRequest, opts ...grpc.CallOption) (*GetSeatAllocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatAllocationResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_GetAllocationSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) CancelBookingTicket(ctx context.Context, in *CancelBookingTicketRequest, opts ...grpc.CallOption) (*CancelBookingTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelBookingTicketResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_CancelBookingTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) GetAvailableSeats(ctx context.Context, in *GetAvailableSeatsRequest, opts ...grpc.CallOption) (*GetAvailableSeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableSeatsResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_GetAvailableSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) UpdateUserSeat(ctx context.Context, in *UpdateUserSeatRequest, opts ...grpc.CallOption) (*UpdateUserSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserSeatResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_UpdateUserSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketBookingServiceServer is the server API for TicketBookingService service.
// All implementations must embed UnimplementedTicketBookingServiceServer
// for forward compatibility.
type TicketBookingServiceServer interface {
	PurchaseTicket(context.Context, *TicketRequest) (*TicketResponse, error)
	GetReceipt(context.Context, *GetUserTicketRequest) (*TicketResponse, error)
	GetAllocationSeats(context.Context, *GetSeatAllocationRequest) (*GetSeatAllocationResponse, error)
	CancelBookingTicket(context.Context, *CancelBookingTicketRequest) (*CancelBookingTicketResponse, error)
	GetAvailableSeats(context.Context, *GetAvailableSeatsRequest) (*GetAvailableSeatsResponse, error)
	UpdateUserSeat(context.Context, *UpdateUserSeatRequest) (*UpdateUserSeatResponse, error)
	mustEmbedUnimplementedTicketBookingServiceServer()
}

// UnimplementedTicketBookingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketBookingServiceServer struct{}

func (UnimplementedTicketBookingServiceServer) PurchaseTicket(context.Context, *TicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedTicketBookingServiceServer) GetReceipt(context.Context, *GetUserTicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedTicketBookingServiceServer) GetAllocationSeats(context.Context, *GetSeatAllocationRequest) (*GetSeatAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocationSeats not implemented")
}
func (UnimplementedTicketBookingServiceServer) CancelBookingTicket(context.Context, *CancelBookingTicketRequest) (*CancelBookingTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBookingTicket not implemented")
}
func (UnimplementedTicketBookingServiceServer) GetAvailableSeats(context.Context, *GetAvailableSeatsRequest) (*GetAvailableSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableSeats not implemented")
}
func (UnimplementedTicketBookingServiceServer) UpdateUserSeat(context.Context, *UpdateUserSeatRequest) (*UpdateUserSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSeat not implemented")
}
func (UnimplementedTicketBookingServiceServer) mustEmbedUnimplementedTicketBookingServiceServer() {}
func (UnimplementedTicketBookingServiceServer) testEmbeddedByValue()                              {}

// UnsafeTicketBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketBookingServiceServer will
// result in compilation errors.
type UnsafeTicketBookingServiceServer interface {
	mustEmbedUnimplementedTicketBookingServiceServer()
}

func RegisterTicketBookingServiceServer(s grpc.ServiceRegistrar, srv TicketBookingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicketBookingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketBookingService_ServiceDesc, srv)
}

func _TicketBookingService_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_PurchaseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).PurchaseTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).GetReceipt(ctx, req.(*GetUserTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_GetAllocationSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).GetAllocationSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_GetAllocationSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).GetAllocationSeats(ctx, req.(*GetSeatAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_CancelBookingTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).CancelBookingTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_CancelBookingTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).CancelBookingTicket(ctx, req.(*CancelBookingTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_GetAvailableSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).GetAvailableSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_GetAvailableSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).GetAvailableSeats(ctx, req.(*GetAvailableSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_UpdateUserSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).UpdateUserSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_UpdateUserSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).UpdateUserSeat(ctx, req.(*UpdateUserSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketBookingService_ServiceDesc is the grpc.ServiceDesc for TicketBookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketBookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TicketBookingService",
	HandlerType: (*TicketBookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurchaseTicket",
			Handler:    _TicketBookingService_PurchaseTicket_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _TicketBookingService_GetReceipt_Handler,
		},
		{
			MethodName: "GetAllocationSeats",
			Handler:    _TicketBookingService_GetAllocationSeats_Handler,
		},
		{
			MethodName: "CancelBookingTicket",
			Handler:    _TicketBookingService_CancelBookingTicket_Handler,
		},
		{
			MethodName: "GetAvailableSeats",
			Handler:    _TicketBookingService_GetAvailableSeats_Handler,
		},
		{
			MethodName: "UpdateUserSeat",
			Handler:    _TicketBookingService_UpdateUserSeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ticket_service.proto",
}
